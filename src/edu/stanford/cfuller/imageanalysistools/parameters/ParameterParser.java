/* ***** BEGIN LICENSE BLOCK *****
 * 
 * Copyright (c) 2012 Colin J. Fuller
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the Software), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED AS IS, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 * 
 * ***** END LICENSE BLOCK ***** */

package edu.stanford.cfuller.imageanalysistools.parameters;

/**
 * Utilities for processing analysis parameters from suitably formatted files.
 *
 * @author Colin J. Fuller
 */
public abstract class ParameterParser {

	/**
     * Parses a parameter file to a ParameterDictionary.
     * @param filename  The file to parse.
     * @return          A ParameterDictionary with an entry for each parameter described in the file.
     */
	public ParameterDictionary parseFileToParameterDictionary(String filename) {
		return convertParameterListToParameterDictionary(parseFileToParameterList(filename));
	}
	
	/**
     * Collects a List of Parameters (as might be generated by {@link #parseFileToParameterList(String)}) into a ParameterDictionary.
     * @param pl    The List of Parameters to consolidate.
     * @return      A ParameterDictionary containing an entry for each supplied Parameter.
     */
    public ParameterDictionary convertParameterListToParameterDictionary(java.util.List<Parameter> pl) {
        ParameterDictionary pd = ParameterDictionary.emptyDictionary();
        for (Parameter p : pl) {        	
            pd.addParameter(p);

        }

        return pd;
    }

	/**
     * Parses a file to a list of Parameters, suitable for direct use or for conversion to a ParameterDictionary.
     * @param filename      The filename of the file describing the parameters.
     * @return              A List containing one Parameter object for each parameter described by the file.
     */
	public abstract java.util.List<Parameter> parseFileToParameterList(String filename);
	
}

