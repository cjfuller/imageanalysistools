/* ***** BEGIN LICENSE BLOCK *****
 * 
 * Copyright (c) 2011 Colin J. Fuller
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 * 
 * ***** END LICENSE BLOCK ***** */


package edu.stanford.cfuller.analysistoolsinterface;

import java.util.logging.Formatter;
import java.util.logging.Handler;
import java.util.logging.LogRecord;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JTextArea;
import javax.swing.SwingUtilities;

/**
 *
 * @author cfuller
 */
public class SegmentationWindow extends javax.swing.JFrame {

    SegmentationController controller;
    DefaultComboBoxModel methodComboBoxModel;
    TextAreaLogHandler handler;

    /** Creates new form SegmentationWindow */
    public SegmentationWindow(SegmentationController sc) {
        this.controller = sc;
        initComponents();
        methodComboBoxModel = new DefaultComboBoxModel();
        this.methodComboBox.setModel(methodComboBoxModel);
        this.handler = new TextAreaLogHandler(this.loggingTextArea);
    }

    public Handler getLogHandler() {
        return this.handler;
    }

    public DefaultComboBoxModel getMethodComboBoxModel() {
        return this.methodComboBoxModel;
    }

    public String getParameterFilename() {
        return this.parameterFileTextField.getText();
    }

    public void setParameterFilename(String filename) {
        this.parameterFileTextField.setText(filename);
    }

    public String getImageFilename() {
        return this.imageTextField.getText();
    }

    public void setImageFilename(String filename) {
        this.imageTextField.setText(filename);
    }

    public int getSelectedMethodIndex() {
        return this.methodComboBox.getSelectedIndex();
    }
    public void setSelectedMethodIndex(int i) {
        this.methodComboBox.setSelectedIndex(i);
    }
    public void setCustomMethodFieldEnabled(boolean enabled) {
        this.customMethodTextField.setEnabled(enabled);
    }
    public String getCustomClassName() {
        return this.customMethodTextField.getText();
    }

    public void setStatus(String status) {
        this.statusLabel.setText(status);
    }

    public String getStatus() {
        return this.statusLabel.getText();
    }

    public boolean summarizeDataOnly() {
        return this.summarizeDataOnlyCheckBox.isSelected();
    }
    public boolean getUseOmeroServer() {
        return this.useOmeroServerCheckBox.isSelected();
    }
    public void setUseOmeroServer(boolean use) {
        this.useOmeroServerCheckBox.setSelected(use);
    }
   

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        methodComboBox = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        customMethodTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        parameterFileTextField = new javax.swing.JTextField();
        parameterBrowseButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        imageTextField = new javax.swing.JTextField();
        imageBrowseButton = new javax.swing.JButton();
        runButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        statusLabel = new javax.swing.JLabel();
        summarizeDataOnlyCheckBox = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        loggingTextArea = new javax.swing.JTextArea();
        omeroButton = new javax.swing.JButton();
        useOmeroServerCheckBox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Segmentation and Quantification");

        methodComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        methodComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                methodComboBoxActionPerformed(evt);
            }
        });

        jLabel2.setText("Method:");

        jLabel3.setText("Parameter file:");

        parameterBrowseButton.setText("Browse");
        parameterBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                parameterBrowseButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("File or directory to process:");

        imageBrowseButton.setText("Browse");
        imageBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imageBrowseButtonActionPerformed(evt);
            }
        });

        runButton.setText("Run");
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });

        jLabel5.setText("Status:");

        statusLabel.setText("Ready");

        summarizeDataOnlyCheckBox.setText("Summarize data only");
        summarizeDataOnlyCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                summarizeDataOnlyCheckBoxActionPerformed(evt);
            }
        });

        jScrollPane1.setPreferredSize(new java.awt.Dimension(100, 80));

        loggingTextArea.setColumns(20);
        loggingTextArea.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        loggingTextArea.setRows(5);
        jScrollPane1.setViewportView(loggingTextArea);

        omeroButton.setText("Browse OMERO");
        omeroButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                omeroButtonActionPerformed(evt);
            }
        });

        useOmeroServerCheckBox.setText("Use OMERO server");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel2)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                        .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                            .add(jLabel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 187, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(imageBrowseButton))
                        .add(layout.createSequentialGroup()
                            .add(jLabel3)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(parameterBrowseButton))
                        .add(parameterFileTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 284, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(org.jdesktop.layout.GroupLayout.TRAILING, methodComboBox, 0, 287, Short.MAX_VALUE)
                        .add(org.jdesktop.layout.GroupLayout.TRAILING, customMethodTextField))
                    .add(summarizeDataOnlyCheckBox)
                    .add(layout.createSequentialGroup()
                        .add(runButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel5)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(statusLabel))
                    .add(imageTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 284, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(layout.createSequentialGroup()
                        .add(useOmeroServerCheckBox)
                        .add(18, 18, 18)
                        .add(omeroButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 121, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 451, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(jLabel2)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(methodComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(customMethodTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel3)
                            .add(parameterBrowseButton))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(parameterFileTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(29, 29, 29)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(imageBrowseButton)
                            .add(jLabel4))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(imageTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(useOmeroServerCheckBox)
                            .add(omeroButton))
                        .add(9, 9, 9)
                        .add(summarizeDataOnlyCheckBox)
                        .add(18, 18, 18)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(runButton)
                            .add(statusLabel)
                            .add(jLabel5)))
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 390, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void parameterBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_parameterBrowseButtonActionPerformed
        this.controller.browseForParameterFile();
    }//GEN-LAST:event_parameterBrowseButtonActionPerformed

    private void imageBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imageBrowseButtonActionPerformed
        this.controller.browseForImageFileOrDirectory();
    }//GEN-LAST:event_imageBrowseButtonActionPerformed

    private void methodComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_methodComboBoxActionPerformed
        this.controller.onMethodSelect();
    }//GEN-LAST:event_methodComboBoxActionPerformed

    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed

        this.controller.runButtonPressed();


    }//GEN-LAST:event_runButtonActionPerformed

    private void summarizeDataOnlyCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_summarizeDataOnlyCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_summarizeDataOnlyCheckBoxActionPerformed

    private void omeroButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_omeroButtonActionPerformed
        this.controller.useOmeroDataSource();
    }//GEN-LAST:event_omeroButtonActionPerformed

  

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField customMethodTextField;
    private javax.swing.JButton imageBrowseButton;
    private javax.swing.JTextField imageTextField;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea loggingTextArea;
    private javax.swing.JComboBox methodComboBox;
    private javax.swing.JButton omeroButton;
    private javax.swing.JButton parameterBrowseButton;
    private javax.swing.JTextField parameterFileTextField;
    private javax.swing.JButton runButton;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JCheckBox summarizeDataOnlyCheckBox;
    private javax.swing.JCheckBox useOmeroServerCheckBox;
    // End of variables declaration//GEN-END:variables


    private static class TextAreaLogHandler extends Handler {

        private JTextArea textArea;
        private Formatter formatter;

        public TextAreaLogHandler(JTextArea textArea) {

            this.formatter = new java.util.logging.SimpleFormatter();

            this.textArea = textArea;

        }

        public void close() {

            this.textArea = null;
            this.formatter = null;

        }

        public void flush() {

        }

        public void publish(LogRecord record) {

            final String s = formatter.format(record);

            SwingUtilities.invokeLater(new Runnable() {
                public void run() {
                    textArea.append(s);
                }
            });

        }

    }

}
